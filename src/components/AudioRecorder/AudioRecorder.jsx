import React, { useState, useEffect, useRef } from 'react';
import './AudioRecorder.css';

const AudioRecorder = () => {
  const [isRecording, setIsRecording] = useState(false);
  const [recognizedText, setRecognizedText] = useState('');
  const [isAutoMode, setIsAutoMode] = useState(true);
  const [micStatus, setMicStatus] = useState('inactive'); // 'inactive', 'active', 'error'
  const recognitionRef = useRef(null);

  useEffect(() => {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ Web Speech API
    if (!('webkitSpeechRecognition' in window) && !('SpeechRecognition' in window)) {
      console.error('Web Speech API –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –≤ —ç—Ç–æ–º –±—Ä–∞—É–∑–µ—Ä–µ');
      setMicStatus('error');
      return;
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Speech Recognition
    const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;
    recognitionRef.current = new SpeechRecognition();
    recognitionRef.current.continuous = true;
    recognitionRef.current.interimResults = true;
    recognitionRef.current.lang = 'ru-RU';

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è
    recognitionRef.current.onresult = (event) => {
      let interimTranscript = '';
      let finalTranscript = '';

      for (let i = event.resultIndex; i < event.results.length; i++) {
        const transcript = event.results[i][0].transcript;
        if (event.results[i].isFinal) {
          finalTranscript += transcript + ' ';
        } else {
          interimTranscript += transcript;
        }
      }

      setRecognizedText(prev => prev + finalTranscript);
    };

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
    recognitionRef.current.onerror = (event) => {
      console.error('–û—à–∏–±–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏:', event.error);
      setMicStatus('error');
    };

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è
    recognitionRef.current.onend = () => {
      if (isAutoMode && isRecording) {
        recognitionRef.current.start();
      } else {
        setIsRecording(false);
        setMicStatus('inactive');
      }
    };

    return () => {
      if (recognitionRef.current) {
        recognitionRef.current.stop();
      }
    };
  }, [isAutoMode, isRecording]);

  // –í–∫–ª—é—á–µ–Ω–∏–µ/–≤—ã–∫–ª—é—á–µ–Ω–∏–µ –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞
  const toggleRecording = () => {
    if (isRecording) {
      recognitionRef.current.stop();
      setIsRecording(false);
      setMicStatus('inactive');
    } else {
      try {
        recognitionRef.current.start();
        setIsRecording(true);
        setMicStatus('active');
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è:', error);
        setMicStatus('error');
      }
    }
  };

  // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞
  const toggleMode = () => {
    setIsAutoMode(!isAutoMode);
  };

  // –≠–∫—Å–ø–æ—Ä—Ç —Ç–µ–∫—Å—Ç–∞ (–ø–æ–∫–∞ –±–µ–∑ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞)
  const handleExport = () => {
    console.log('–≠–∫—Å–ø–æ—Ä—Ç:', recognizedText);
    // TODO: —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —ç–∫—Å–ø–æ—Ä—Ç –≤ —Ñ–∞–π–ª
  };

  // –û—á–∏—Å—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞
  const clearText = () => {
    setRecognizedText('');
  };

  return (
    <div className="audio-recorder">
      <div className="recorder-header">
        <h2>–†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ä–µ—á–∏</h2>
        <div className="mic-status">
          –°—Ç–∞—Ç—É—Å: 
          <span className={`status-indicator status-${micStatus}`}>
            {micStatus === 'active' ? '–ê–∫—Ç–∏–≤–µ–Ω' : micStatus === 'error' ? '–û—à–∏–±–∫–∞' : '–ù–µ–∞–∫—Ç–∏–≤–µ–Ω'}
          </span>
        </div>
      </div>

      <div className="recorder-controls">
        <button 
          onClick={toggleRecording}
          className={`mic-button ${isRecording ? 'recording' : ''}`}
        >
          {isRecording ? 'üé§ –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å' : 'üé§ –ù–∞—á–∞—Ç—å –∑–∞–ø–∏—Å—å'}
        </button>

        <button 
          onClick={toggleMode}
          className="mode-button"
        >
          –†–µ–∂–∏–º: {isAutoMode ? '–ê–≤—Ç–æ' : '–†—É—á–Ω–æ–π'}
        </button>

        <button 
          onClick={clearText}
          className="clear-button"
        >
          –û—á–∏—Å—Ç–∏—Ç—å
        </button>
      </div>

      <div className="recognized-text-container">
        <h3>–†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:</h3>
        <div className="text-output">
          {recognizedText || '–¢–µ–∫—Å—Ç –ø–æ—è–≤–∏—Ç—Å—è –∑–¥–µ—Å—å...'}
        </div>
      </div>

      <div className="export-controls">
        <button 
          onClick={handleExport}
          className="export-button"
          disabled={!recognizedText}
        >
          –≠–∫—Å–ø–æ—Ä—Ç —Ç–µ–∫—Å—Ç–∞
        </button>
      </div>
    </div>
  );
};

export default AudioRecorder;
